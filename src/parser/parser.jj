/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. parser.jj */
/*@egen*/options {
    STATIC = false;
}

PARSER_BEGIN(Parser)

package parser;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.PrintStream;

import generator.Generator;
import main.Exiter;
import main.Interpreter;

/**
 * A Scheme compiler
 * 
 * @author Khalil Fazal
 * @student_number 100425046
 */
public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTParserState jjtree = new JJTParserState();

/*@egen*/

    /**
     * Parses the program
     * 
     * @param file
     *            A scheme program file
     * @return the root node
     * @throws ParseException
     *             Used to catch exceptions in JUnit
     */
    public static SimpleNode parse(final File file) throws ParseException {
        SimpleNode root = null;
        @SuppressWarnings("resource")
        FileInputStream ifstream = null;

        try {
            try {
                ifstream = new FileInputStream(file);

                try {
                    root = new Parser(ifstream).program();
                } catch (final TokenMgrError e) {
                    Exiter.exit(-2, String.format("The file \"%s\" is not lexicographically valid.", file.getPath()));
                }
            } finally {
                if (ifstream != null) {
                    ifstream.close();
                }
            }
        } catch (final IOException e) {
            if (file.isFile()) {
                Exiter.exit(2, String.format("Can not find the file \"%s\".", file.getPath()));
            } else {
                Exiter.exit(2, String.format("\"%s\" is not a file.", file.getName()));
            }
        }

        return root;
    }
    /**
     * Print the abstract syntax tree
     * 
     * @param root the root of the scheme program
     * @param prefix spacing to display the tree
     */
    public static void print_AST(final SimpleNode root, final String prefix) {
        if (root != null) {
            if (root.value != null) {
                System.out.println(prefix + root.value);
            }

            for (int i = 0; i < root.jjtGetNumChildren(); ++i) {
                final SimpleNode n = Interpreter.interpret(root.jjtGetChild(i));
                print_AST(n, prefix + Generator.TAB);
            }
        }
    }
}  

PARSER_END(Parser)

// Parentheses
TOKEN: {
        <T_L: "(" >
    |   <T_R: ")" >
}

// Primitive Data Types
TOKEN: {
    <T_BOOLEAN:
            <T_TRUE>
        |   <T_FALSE>               >
    |   <#T_TRUE:  "#t"             >
    |   <#T_FALSE: "#f"             >
    |   <T_INTEGER: (["0" - "9"])+ >
}

// Reserved Functions
TOKEN: {
        <T_DEFINE: "define" >
    |   <T_ELSE:   "else"   >
    |   <T_COND:   "cond"   >
}

// Binary Operators
TOKEN: {
        <T_BINARY:
                <T_PLUS>
            |   <T_MINUS>
            |   <T_TIMES>
            |   <T_DIVIDE>
            |   <T_EQUAL>
            |   <T_LTEQ>
            |   <T_LT>
            |   <T_GTEQ>
            |   <T_GT>      >
    |   <#T_PLUS:   "+"     >
    |   <#T_MINUS:  "-"     >
    |   <#T_TIMES:  "*"     >
    |   <#T_DIVIDE: "/"     >
    |   <#T_EQUAL:  "="     >
    |   <#T_LTEQ:   "<="    >
    |   <#T_LT:     "<"     >
    |   <#T_GTEQ:   ">="    >
    |   <#T_GT:     ">"     >
}

// Variables
// Can't start variable with a hyphen
TOKEN: {
    <T_VARIABLE: ["_", "a" - "z", "A" - "Z"](["-", "_", "a" - "z", "A" - "Z"])* >
}

SKIP: {
        "\t"
    |   "\n"
    |   "\r"
    |   " "
}

SimpleNode program()         : {/*@bgen(jjtree) PROGRAM */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) PROGRAM */
    try {
/*@egen*/
    (sExpression())+ <EOF>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    
    {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void sExpression()      : {} {
    LOOKAHEAD(2)
    
        define()
    |   expression()
}

void define()      : {
    Token s;
    Token t;
    Token u;
} {
    s = <T_L>
    t = <T_DEFINE>
    
    define_condition()
    
    expression()/*@bgen(jjtree) #DEFINE( 2) */
    {
      SimpleNode jjtn001 = new SimpleNode(JJTDEFINE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*//*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
    }
/*@egen*/
    
    {jjtn001.value = t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
    }
/*@egen*/           
    
    u = <T_R>/*@bgen(jjtree) #RIGHT_BRACKET( 0) */
    {
      SimpleNode jjtn002 = new SimpleNode(JJTRIGHT_BRACKET);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*//*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn002,  0);
      jjtc002 = false;
    }
/*@egen*/    
    {jjtn002.value = u.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  0);
      }
    }
/*@egen*/                  /*@bgen(jjtree) #LEFT_BRACKET( 2) */
    {
      SimpleNode jjtn003 = new SimpleNode(JJTLEFT_BRACKET);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
    }
    try {
/*@egen*//*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn003,  2);
      jjtc003 = false;
    }
/*@egen*/
    {jjtn003.value = s.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003,  2);
      }
    }
/*@egen*/                 
}

void define_condition()      : {
    Token s;
    Token t;
    Token u;
    Token v;
    int arguments = 0;
} {
    (
        t = <T_VARIABLE>/*@bgen(jjtree) #VARIABLE( 0) */
        {
          SimpleNode jjtn001 = new SimpleNode(JJTVARIABLE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn001,  0);
          jjtc001 = false;
        }
/*@egen*/
        {jjtn001.value = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  0);
          }
        }
/*@egen*/             
    ) | (
        s = <T_L>

        t = <T_VARIABLE> (
            u = <T_VARIABLE>/*@bgen(jjtree) #ARGUMENT( 0) */
            {
              SimpleNode jjtn002 = new SimpleNode(JJTARGUMENT);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
            }
            try {
/*@egen*//*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn002,  0);
              jjtc002 = false;
            }
/*@egen*/
            {
                jjtn002.value = u.image;
                arguments++;
            }/*@bgen(jjtree)*/
            } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002,  0);
              }
            }
/*@egen*/             
        )+/*@bgen(jjtree) #FUNCTION( arguments) */
        {
          SimpleNode jjtn003 = new SimpleNode(JJTFUNCTION);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn003,  arguments);
          jjtc003 = false;
        }
/*@egen*/
        {jjtn003.value = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003,  arguments);
          }
        }
/*@egen*/                     
        
        v = <T_R>/*@bgen(jjtree) #RIGHT_BRACKET( 0) */
        {
          SimpleNode jjtn004 = new SimpleNode(JJTRIGHT_BRACKET);
          boolean jjtc004 = true;
          jjtree.openNodeScope(jjtn004);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn004,  0);
          jjtc004 = false;
        }
/*@egen*/
        {jjtn004.value = v.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc004) {
            jjtree.closeNodeScope(jjtn004,  0);
          }
        }
/*@egen*/                  /*@bgen(jjtree) #LEFT_BRACKET( 2) */
        {
          SimpleNode jjtn005 = new SimpleNode(JJTLEFT_BRACKET);
          boolean jjtc005 = true;
          jjtree.openNodeScope(jjtn005);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn005,  2);
          jjtc005 = false;
        }
/*@egen*/
        {jjtn005.value = s.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc005) {
            jjtree.closeNodeScope(jjtn005,  2);
          }
        }
/*@egen*/                         
    )
}

void expression()      : {
    Token s;
    Token t;
} {
    (
        s = <T_VARIABLE>/*@bgen(jjtree) #VARIABLE( 0) */
        {
          SimpleNode jjtn001 = new SimpleNode(JJTVARIABLE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn001,  0);
          jjtc001 = false;
        }
/*@egen*/
        {jjtn001.value = s.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  0);
          }
        }
/*@egen*/             
    ) | (
        s = <T_BOOLEAN>/*@bgen(jjtree) #BOOLEAN( 0) */
        {
          SimpleNode jjtn002 = new SimpleNode(JJTBOOLEAN);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn002,  0);
          jjtc002 = false;
        }
/*@egen*/
        {jjtn002.value = s.image.equals("#t");}/*@bgen(jjtree)*/
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  0);
          }
        }
/*@egen*/            
    ) | (
        s = <T_INTEGER>/*@bgen(jjtree) #INTEGER( 0) */
        {
          SimpleNode jjtn003 = new SimpleNode(JJTINTEGER);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn003,  0);
          jjtc003 = false;
        }
/*@egen*/
        {jjtn003.value = Integer.parseInt(s.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003,  0);
          }
        }
/*@egen*/            
    ) | (
        s = <T_L> expression_rest()
        t = <T_R>/*@bgen(jjtree) #RIGHT_BRACKET( 0) */
        {
          SimpleNode jjtn004 = new SimpleNode(JJTRIGHT_BRACKET);
          boolean jjtc004 = true;
          jjtree.openNodeScope(jjtn004);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn004,  0);
          jjtc004 = false;
        }
/*@egen*/
        
        {jjtn004.value = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc004) {
            jjtree.closeNodeScope(jjtn004,  0);
          }
        }
/*@egen*/                  /*@bgen(jjtree) #LEFT_BRACKET( 2) */
        {
          SimpleNode jjtn005 = new SimpleNode(JJTLEFT_BRACKET);
          boolean jjtc005 = true;
          jjtree.openNodeScope(jjtn005);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn005,  2);
          jjtc005 = false;
        }
/*@egen*/
        {jjtn005.value = s.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc005) {
            jjtree.closeNodeScope(jjtn005,  2);
          }
        }
/*@egen*/                                 
    )
}

void expression_rest()      : {
    Token t;
    int arguments = 0;
} {
    (
        (t = <T_BINARY> | t = <T_VARIABLE>)
        
        (expression() {arguments++;})+/*@bgen(jjtree) #FUNCTION( arguments) */
        {
          SimpleNode jjtn001 = new SimpleNode(JJTFUNCTION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn001,  arguments);
          jjtc001 = false;
        }
/*@egen*/
        {jjtn001.value = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  arguments);
          }
        }
/*@egen*/                     
    ) | (
        t = <T_COND> (LOOKAHEAD(2) condition() {arguments++;})*
        (conditional_terminal() {arguments++;})?/*@bgen(jjtree) #CONDITION( arguments) */
        {
          SimpleNode jjtn002 = new SimpleNode(JJTCONDITION);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn002,  arguments);
          jjtc002 = false;
        }
/*@egen*/
        {jjtn002.value = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  arguments);
          }
        }
/*@egen*/                      
    )   
}

void condition()      : {
    Token s;
    Token t;
} {
    s = <T_L> expression() expression()
    t = <T_R>/*@bgen(jjtree) #RIGHT_BRACKET( 0) */
    {
      SimpleNode jjtn001 = new SimpleNode(JJTRIGHT_BRACKET);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*//*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn001,  0);
      jjtc001 = false;
    }
/*@egen*/
    
    {jjtn001.value = t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  0);
      }
    }
/*@egen*/                  /*@bgen(jjtree) #LEFT_BRACKET( 3) */
    {
      SimpleNode jjtn002 = new SimpleNode(JJTLEFT_BRACKET);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*//*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn002,  3);
      jjtc002 = false;
    }
/*@egen*/
    {jjtn002.value = s.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  3);
      }
    }
/*@egen*/                 
}

void conditional_terminal()      : {
    Token s;
    Token t;
    Token u;
} {
    s = <T_L>
    t = <T_ELSE>/*@bgen(jjtree) #ELSE( 0) */
    {
      SimpleNode jjtn001 = new SimpleNode(JJTELSE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*//*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn001,  0);
      jjtc001 = false;
    }
/*@egen*/
    {jjtn001.value = t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  0);
      }
    }
/*@egen*/         
        
    expression()
    u = <T_R>/*@bgen(jjtree) #RIGHT_BRACKET( 0) */
    {
      SimpleNode jjtn002 = new SimpleNode(JJTRIGHT_BRACKET);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*//*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn002,  0);
      jjtc002 = false;
    }
/*@egen*/
        
    {jjtn002.value = u.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  0);
      }
    }
/*@egen*/                  /*@bgen(jjtree) #LEFT_BRACKET( 3) */
    {
      SimpleNode jjtn003 = new SimpleNode(JJTLEFT_BRACKET);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
    }
    try {
/*@egen*//*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn003,  3);
      jjtc003 = false;
    }
/*@egen*/
    {jjtn003.value = s.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003,  3);
      }
    }
/*@egen*/                 
}