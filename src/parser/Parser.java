/* Parser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. Parser.java */
package parser;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.PrintStream;

import generator.Generator;
import main.Exiter;
import main.Interpreter;

/**
 * A Scheme compiler
 * 
 * @author Khalil Fazal
 * @student_number 100425046
 */
public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants, ParserConstants {/*@bgen(jjtree)*/
  protected JJTParserState jjtree = new JJTParserState();
    /**
     * Parses the program
     * 
     * @param file
     *            A scheme program file
     * @return the root node
     * @throws ParseException
     *             Used to catch exceptions in JUnit
     */
    public static SimpleNode parse(final File file) throws ParseException {
        SimpleNode root = null;
        @SuppressWarnings("resource")
        FileInputStream ifstream = null;

        try {
            try {
                ifstream = new FileInputStream(file);

                try {
                    root = new Parser(ifstream).program();
                } catch (final TokenMgrError e) {
                    Exiter.exit(-2, String.format("The file \"%s\" is not lexicographically valid.", file.getPath()));
                }
            } finally {
                if (ifstream != null) {
                    ifstream.close();
                }
            }
        } catch (final IOException e) {
            if (file.isFile()) {
                Exiter.exit(2, String.format("Can not find the file \"%s\".", file.getPath()));
            } else {
                Exiter.exit(2, String.format("\"%s\" is not a file.", file.getName()));
            }
        }

        return root;
    }
    /**
     * Print the abstract syntax tree
     * 
     * @param root the root of the scheme program
     * @param prefix spacing to display the tree
     */
    public static void print_AST(final SimpleNode root, final String prefix) {
        if (root != null) {
            if (root.value != null) {
                System.out.println(prefix + root.value);
            }

            for (int i = 0; i < root.jjtGetNumChildren(); ++i) {
                final SimpleNode n = Interpreter.interpret(root.jjtGetChild(i));
                print_AST(n, prefix + Generator.TAB);
            }
        }
    }

  final public SimpleNode program() throws ParseException {/*@bgen(jjtree) PROGRAM */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        sExpression();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case T_L:
        case T_BOOLEAN:
        case T_INTEGER:
        case T_VARIABLE:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
      }
      jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
}

  final public void sExpression() throws ParseException {
    if (jj_2_1(2)) {
      define();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case T_L:
      case T_BOOLEAN:
      case T_INTEGER:
      case T_VARIABLE:{
        expression();
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  final public void define() throws ParseException {Token s;
    Token t;
    Token u;
    s = jj_consume_token(T_L);
    t = jj_consume_token(T_DEFINE);
    define_condition();
    expression();
SimpleNode jjtn001 = new SimpleNode(JJTDEFINE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    try {
jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
jjtn001.value = t.image;
    } finally {
if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
    }
    u = jj_consume_token(T_R);
SimpleNode jjtn002 = new SimpleNode(JJTRIGHT_BRACKET);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    try {
jjtree.closeNodeScope(jjtn002,  0);
      jjtc002 = false;
jjtn002.value = u.image;
    } finally {
if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  0);
      }
    }
SimpleNode jjtn003 = new SimpleNode(JJTLEFT_BRACKET);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
    try {
jjtree.closeNodeScope(jjtn003,  2);
      jjtc003 = false;
jjtn003.value = s.image;
    } finally {
if (jjtc003) {
        jjtree.closeNodeScope(jjtn003,  2);
      }
    }
}

  final public void define_condition() throws ParseException {Token s;
    Token t;
    Token u;
    Token v;
    int arguments = 0;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case T_VARIABLE:{
      t = jj_consume_token(T_VARIABLE);
SimpleNode jjtn001 = new SimpleNode(JJTVARIABLE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001,  0);
          jjtc001 = false;
jjtn001.value = t.image;
      } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  0);
          }
      }
      break;
      }
    case T_L:{
      s = jj_consume_token(T_L);
      t = jj_consume_token(T_VARIABLE);
      label_2:
      while (true) {
        u = jj_consume_token(T_VARIABLE);
SimpleNode jjtn002 = new SimpleNode(JJTARGUMENT);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
        try {
jjtree.closeNodeScope(jjtn002,  0);
              jjtc002 = false;
jjtn002.value = u.image;
                arguments++;
        } finally {
if (jjtc002) {
                jjtree.closeNodeScope(jjtn002,  0);
              }
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case T_VARIABLE:{
          ;
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
      }
SimpleNode jjtn003 = new SimpleNode(JJTFUNCTION);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
      try {
jjtree.closeNodeScope(jjtn003,  arguments);
          jjtc003 = false;
jjtn003.value = t.image;
      } finally {
if (jjtc003) {
            jjtree.closeNodeScope(jjtn003,  arguments);
          }
      }
      v = jj_consume_token(T_R);
SimpleNode jjtn004 = new SimpleNode(JJTRIGHT_BRACKET);
          boolean jjtc004 = true;
          jjtree.openNodeScope(jjtn004);
      try {
jjtree.closeNodeScope(jjtn004,  0);
          jjtc004 = false;
jjtn004.value = v.image;
      } finally {
if (jjtc004) {
            jjtree.closeNodeScope(jjtn004,  0);
          }
      }
SimpleNode jjtn005 = new SimpleNode(JJTLEFT_BRACKET);
          boolean jjtc005 = true;
          jjtree.openNodeScope(jjtn005);
      try {
jjtree.closeNodeScope(jjtn005,  2);
          jjtc005 = false;
jjtn005.value = s.image;
      } finally {
if (jjtc005) {
            jjtree.closeNodeScope(jjtn005,  2);
          }
      }
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void expression() throws ParseException {Token s;
    Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case T_VARIABLE:{
      s = jj_consume_token(T_VARIABLE);
SimpleNode jjtn001 = new SimpleNode(JJTVARIABLE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001,  0);
          jjtc001 = false;
jjtn001.value = s.image;
      } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  0);
          }
      }
      break;
      }
    case T_BOOLEAN:{
      s = jj_consume_token(T_BOOLEAN);
SimpleNode jjtn002 = new SimpleNode(JJTBOOLEAN);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
      try {
jjtree.closeNodeScope(jjtn002,  0);
          jjtc002 = false;
jjtn002.value = s.image.equals("#t");
      } finally {
if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  0);
          }
      }
      break;
      }
    case T_INTEGER:{
      s = jj_consume_token(T_INTEGER);
SimpleNode jjtn003 = new SimpleNode(JJTINTEGER);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
      try {
jjtree.closeNodeScope(jjtn003,  0);
          jjtc003 = false;
jjtn003.value = Integer.parseInt(s.image);
      } finally {
if (jjtc003) {
            jjtree.closeNodeScope(jjtn003,  0);
          }
      }
      break;
      }
    case T_L:{
      s = jj_consume_token(T_L);
      expression_rest();
      t = jj_consume_token(T_R);
SimpleNode jjtn004 = new SimpleNode(JJTRIGHT_BRACKET);
          boolean jjtc004 = true;
          jjtree.openNodeScope(jjtn004);
      try {
jjtree.closeNodeScope(jjtn004,  0);
          jjtc004 = false;
jjtn004.value = t.image;
      } finally {
if (jjtc004) {
            jjtree.closeNodeScope(jjtn004,  0);
          }
      }
SimpleNode jjtn005 = new SimpleNode(JJTLEFT_BRACKET);
          boolean jjtc005 = true;
          jjtree.openNodeScope(jjtn005);
      try {
jjtree.closeNodeScope(jjtn005,  2);
          jjtc005 = false;
jjtn005.value = s.image;
      } finally {
if (jjtc005) {
            jjtree.closeNodeScope(jjtn005,  2);
          }
      }
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void expression_rest() throws ParseException {Token t;
    int arguments = 0;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case T_BINARY:
    case T_VARIABLE:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case T_BINARY:{
        t = jj_consume_token(T_BINARY);
        break;
        }
      case T_VARIABLE:{
        t = jj_consume_token(T_VARIABLE);
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_3:
      while (true) {
        expression();
arguments++;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case T_L:
        case T_BOOLEAN:
        case T_INTEGER:
        case T_VARIABLE:{
          ;
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          break label_3;
        }
      }
SimpleNode jjtn001 = new SimpleNode(JJTFUNCTION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001,  arguments);
          jjtc001 = false;
jjtn001.value = t.image;
      } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  arguments);
          }
      }
      break;
      }
    case T_COND:{
      t = jj_consume_token(T_COND);
      label_4:
      while (true) {
        if (jj_2_2(2)) {
          ;
        } else {
          break label_4;
        }
        condition();
arguments++;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case T_L:{
        conditional_terminal();
arguments++;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        ;
      }
SimpleNode jjtn002 = new SimpleNode(JJTCONDITION);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
      try {
jjtree.closeNodeScope(jjtn002,  arguments);
          jjtc002 = false;
jjtn002.value = t.image;
      } finally {
if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  arguments);
          }
      }
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void condition() throws ParseException {Token s;
    Token t;
    s = jj_consume_token(T_L);
    expression();
    expression();
    t = jj_consume_token(T_R);
SimpleNode jjtn001 = new SimpleNode(JJTRIGHT_BRACKET);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    try {
jjtree.closeNodeScope(jjtn001,  0);
      jjtc001 = false;
jjtn001.value = t.image;
    } finally {
if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  0);
      }
    }
SimpleNode jjtn002 = new SimpleNode(JJTLEFT_BRACKET);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    try {
jjtree.closeNodeScope(jjtn002,  3);
      jjtc002 = false;
jjtn002.value = s.image;
    } finally {
if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  3);
      }
    }
}

  final public void conditional_terminal() throws ParseException {Token s;
    Token t;
    Token u;
    s = jj_consume_token(T_L);
    t = jj_consume_token(T_ELSE);
SimpleNode jjtn001 = new SimpleNode(JJTELSE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    try {
jjtree.closeNodeScope(jjtn001,  0);
      jjtc001 = false;
jjtn001.value = t.image;
    } finally {
if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  0);
      }
    }
    expression();
    u = jj_consume_token(T_R);
SimpleNode jjtn002 = new SimpleNode(JJTRIGHT_BRACKET);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    try {
jjtree.closeNodeScope(jjtn002,  0);
      jjtc002 = false;
jjtn002.value = u.image;
    } finally {
if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  0);
      }
    }
SimpleNode jjtn003 = new SimpleNode(JJTLEFT_BRACKET);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
    try {
jjtree.closeNodeScope(jjtn003,  3);
      jjtc003 = false;
jjtn003.value = s.image;
    } finally {
if (jjtc003) {
        jjtree.closeNodeScope(jjtn003,  3);
      }
    }
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3R_6()
 {
    if (jj_scan_token(T_L)) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_11()
 {
    if (jj_scan_token(T_L)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3R_10()
 {
    if (jj_scan_token(T_INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_9()
 {
    if (jj_scan_token(T_BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3R_5()
 {
    if (jj_scan_token(T_L)) return true;
    if (jj_scan_token(T_DEFINE)) return true;
    return false;
  }

  private boolean jj_3R_7()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_8()) {
    jj_scanpos = xsp;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_8()
 {
    if (jj_scan_token(T_VARIABLE)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_6()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[9];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x10004a,0x10004a,0x100000,0x100002,0x10004a,0x100400,0x10004a,0x2,0x100600,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 9; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 9; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 9; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new ParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 9; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 9; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 9; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[25];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 9; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 25; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 2; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
